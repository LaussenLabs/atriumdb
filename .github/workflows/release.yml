name: atriumdb_release
'on':
  workflow_dispatch:
    inputs:
      releaseVersion:
        description: Release Version
        required: true
        type: string
      pypiReleaseFeed:
        description: PyPI Release Feed
        required: true
        type: choice
        options:
        - test.pypi
        - pypi
        default: test.pypi
        
jobs:
  build-release:
    runs-on: ubuntu-22.04
    
    services:
      mariadb:
        image: mariadb:11.4
        env:
          MARIADB_ROOT_PASSWORD: rootpass
          MARIADB_DATABASE: testdb
          MARIADB_USER: testuser
          MARIADB_PASSWORD: testpass
        ports:
          - 3306:3306
        options: >-
          --health-cmd="/usr/local/bin/healthcheck.sh --su mysql --connect"
          --health-interval=15s
          --health-timeout=10s
          --health-retries=10

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install -y tzdata cmake build-essential gdb libzstd-dev liblz4-dev python3.10 mingw-w64 libmariadb-dev
        pip install build pytest
    - name: Build C libraries
      run: |
        cd tsc-lib
        cmake -Bcmake-build-release -DCMAKE_TOOLCHAIN_FILE=windows-TC-mingw.cmake -DCMAKE_BUILD_TYPE='Release'
        cmake --build cmake-build-release --target Block
        mkdir -p ../sdk/bin
        cp cmake-build-release/src/Block/libTSC.dll ../sdk/bin/libTSC.dll
        rm -rf cmake-build-release/**
        cmake -Bcmake-build-release -H. -DCMAKE_BUILD_TYPE='Release'
        cmake --build cmake-build-release --target Block
        cp cmake-build-release/src/Block/libTSC.so ../sdk/bin/libTSC.so
        cd ..
    - name: Build SDK package
      run: cd sdk && python -m build
    
    - name: Upload distributions
      uses: actions/upload-artifact@v4
      with:
        name: release-dists
        path: |
            sdk/dist/*.whl
            sdk/dist/*.gz
            sdk/bin/*.dll
            sdk/bin/*.so
        
    # - name: Install atriumdb test dependencies
    #   run: cd sdk && pip install .[testing]
      
    # - name: Run tests
    #   env:
    #     MARIA_DB_HOST: 127.0.0.1
    #     MARIA_DB_PORT: 3306
    #     MARIA_DB_USER: root
    #     MARIA_DB_PASSWORD: rootpass
    #   run: |
    #     cd sdk
    #     pytest
        
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      if: github.ref_type == 'tag'
      with:
        tag_name: ${{ github.event.inputs.releaseVersion }}
        name: ${{ github.event.inputs.releaseVersion }}
        files: |
          sdk/dist/*.whl
          sdk/dist/*.gz
          sdk/bin/*.dll
          sdk/bin/*.so
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
  pypi-publish:
    name: Publish to pypi
    needs:
      - build-release
    runs-on: ubuntu-22.04
    permissions:
      # IMPORTANT: this permission is mandatory for trusted publishing
      id-token: write

    # Dedicated environments with protections for publishing are strongly recommended.
    # For more information, see: https://docs.github.com/en/actions/deployment/targeting-different-environments/using-environments-for-deployment#deployment-protection-rules
    environment:
      name: ${{ github.event.inputs.pypiReleaseFeed }}
      # url: https://${{ github.event.inputs.pypiReleaseFeed }}.org/project/atriumdb/${{ github.event.release.name }}

    steps:
      - name: Retrieve release distributions
        uses: actions/download-artifact@v5
        with:
          name: release-dists
          # path: sdk/dist/*.whl
      
      - name: Set repository URL
        id: set-url
        run: |
          if [ "${{ github.event.inputs.pypiReleaseFeed }}" = "pypi" ]; then
            echo "url=https://upload.pypi.org/legacy/" >> $GITHUB_OUTPUT
          else
            echo "url=https://test.pypi.org/legacy/" >> $GITHUB_OUTPUT
          fi
      - name: Publish release distributions to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: ${{ steps.set-url.outputs.url }}
          # packages-dir: /home/runner/work/atriumdb/atriumdb/sdk/dist

  update-atriumdb-server:
    needs:
      - build-release
      - pypi-publish
    runs-on: ubuntu-22.04
    steps:
      - name: Clone server repo
        run: git clone https://github.com/LaussenLabs/atriumdb-server.git

      - name: Create new branch and update version
        run: |
          cd atriumdb-server
          git checkout -b update-atriumdb-version
          sed -i "s/atriumdb\[mariadb\]==[0-9.]*/atriumdb[mariadb]==${{ github.event.inputs.releaseVersion }}/" requirements.txt
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add requirements.txt
          git commit -m "Update atriumdb to version ${{ github.event.inputs.releaseVersion }}"
          git remote set-url origin https://x-access-token:${{ secrets.RELEASE_PAT }}@github.com/LaussenLabs/atriumdb-server.git
          git push origin update-atriumdb-version


      - name: Create Pull Request
        run: |
          gh auth login --with-token <<< "${{ secrets.RELEASE_PAT }}"
          gh pr create \
            --repo LaussenLabs/atriumdb-server \
            --title "Update atriumdb to version ${{ github.event.inputs.releaseVersion }}" \
            --body "This PR updates atriumdb to version ${{ github.event.inputs.releaseVersion }}." \
            --base main \
            --head update-atriumdb-version \
            --reviewer bgreer101,WilliamDixon

      
          
